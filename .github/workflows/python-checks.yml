name: Python checks

on: pull_request

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./test/python.Dockerfile
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            WORKSPACE=/__w/Loris-MRI/Loris-MRI
          cache-from: type=gha,scope=loris-python-${{ matrix.python-version }}
          cache-to: type=gha,scope=loris-python-${{ matrix.python-version }}
          outputs: type=docker,dest=/tmp/loris-python-${{ matrix.python-version }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: loris-python√®${{ matrix.python-version }}
          path: /tmp/loris-python-${{ matrix.python-version }}.tar
  
  ruff:
    name: Ruff
    needs: docker
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

  #   container:
  #     image: ghcr.io/${{ github.actor }}/python:${{ matrix.python-version }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: loris-python-${{ matrix.python-version }}
          path: /tmp
      
      - name: Checkout LORIS-MRI
        uses: actions/checkout@v4
  
      - name: Load image
        run: |
          docker load --input /tmp/loris-python-${{ matrix.python-version }}.tar
          docker image ls -a
  #     - name: Run Ruff
  #       run: ruff check --output-format=github

  # pyright-strict:
  #   name: Pyright strict
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       python-version: ["3.11", "3.12"]

  #   container:
  #     image: ghcr.io/${{ github.actor }}/python:${{ matrix.python-version }}

  #   steps:
  #   - name: Check out LORIS-MRI
  #     uses: actions/checkout@v4

  #     # The `jq` arcane is used to translate the errors from JSON to the GitHub actions format
  #   - name: Run Pyright
  #     shell: bash
  #     run: |
  #       pyright --outputjson | jq -r '.generalDiagnostics[] | "::error file=\(.file),line=\(.range.start.line),col=\(.range.start.character)::\(.message)"'
  #       (exit ${PIPESTATUS[0]})

  # pyrigh-global:
  #   name: Pyright global
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       python-version: ["3.11", "3.12"]

  #   container:
  #     image: ghcr.io/${{ github.actor }}/python:${{ matrix.python-version }}

  #   steps:
  #   - name: Check out LORIS-MRI
  #     uses: actions/checkout@v4

  #     # The `jq` arcane is used to translate the errors from JSON to the GitHub actions format
  #   - name: Run Pyright
  #     shell: bash
  #     run: |
  #       cd test
  #       pyright --outputjson | jq -r '.generalDiagnostics[] | "::error file=\(.file),line=\(.range.start.line),col=\(.range.start.character)::\(.message)"'
  #       (exit ${PIPESTATUS[0]})
