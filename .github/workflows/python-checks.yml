name: Python checks

on:
  - workflow_dispatch
  - pull_request

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
  
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./test/python.Dockerfile
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            WORKSPACE=/__w/Loris-MRI/Loris-MRI
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=build-loris-python-${{ matrix.python-version }}
          cache-to: type=gha,scope=build-loris-python-${{ matrix.python-version }}

  # ruff:
  #   name: Ruff
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       python-version: ["3.11", "3.12"]

  #   container:
  #     image: ghcr.io/${{ github.actor }}/python:${{ matrix.python-version }}

  #   steps:
  #     - name: Checkout LORIS-MRI
  #       uses: actions/checkout@v4

  #     - name: Run Ruff
  #       run: ruff check --output-format=github

  # pyright-strict:
  #   name: Pyright strict
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       python-version: ["3.11", "3.12"]

  #   container:
  #     image: ghcr.io/${{ github.actor }}/python:${{ matrix.python-version }}

  #   steps:
  #   - name: Check out LORIS-MRI
  #     uses: actions/checkout@v4

  #     # The `jq` arcane is used to translate the errors from JSON to the GitHub actions format
  #   - name: Run Pyright
  #     shell: bash
  #     run: |
  #       pyright --outputjson | jq -r '.generalDiagnostics[] | "::error file=\(.file),line=\(.range.start.line),col=\(.range.start.character)::\(.message)"'
  #       (exit ${PIPESTATUS[0]})

  # pyrigh-global:
  #   name: Pyright global
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       python-version: ["3.11", "3.12"]

  #   container:
  #     image: ghcr.io/${{ github.actor }}/python:${{ matrix.python-version }}

  #   steps:
  #   - name: Check out LORIS-MRI
  #     uses: actions/checkout@v4

  #     # The `jq` arcane is used to translate the errors from JSON to the GitHub actions format
  #   - name: Run Pyright
  #     shell: bash
  #     run: |
  #       cd test
  #       pyright --outputjson | jq -r '.generalDiagnostics[] | "::error file=\(.file),line=\(.range.start.line),col=\(.range.start.character)::\(.message)"'
  #       (exit ${PIPESTATUS[0]})
